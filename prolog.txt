1
% Facts about animals
animal(lion).
animal(tiger).
animal(elephant).
animal(zebra).

% Facts about countries and their capitals
capital_of(india, delhi).
capital_of(usa, washington).
capital_of(france, paris).
capital_of(japan, tokyo).

% Queries:
% ?- animal(lion).        -> true
% ?- capital_of(india, delhi).   -> true
% ?- animal(dog).         -> false
% ?- capital_of(france, london). -> false



2.
% Facts
parent(john, mary).
parent(john, mike).
parent(susan, mary).
parent(susan, mike).

parent(mary, kate).
parent(mary, johnny).
parent(mike, sophie).

% Rules
mother(X, Y) :- parent(X, Y), female(X).
father(X, Y) :- parent(X, Y), male(X).
sibling(X, Y) :- parent(Z, X), parent(Z, Y), X \= Y.
grandparent(X, Y) :- parent(X, Z), parent(Z, Y).

% Facts for gender
female(susan).
female(mary).
female(kate).
female(sophie).
male(john).
male(mike).
male(johnny).

% Queries:
% ?- mother(susan, mike). -> true
% ?- father(john, mary). -> true
% ?- sibling(mary, mike). -> true
% ?- grandparent(john, kate). -> true



3.
% Facts
father(a, b).
father(a, c).
father(b, d).
father(b, e).
father(c, f).

% Define brother relation
brother(X, Y) :- father(Z, X), father(Z, Y), X \= Y.

% Define cousin relation
cousin(X, Y) :- father(Z1, X), father(Z2, Y), brother(Z1, Z2).

% Define grandson relation
grandson(X, Y) :- father(Y, Z), father(Z, X).

% Define descendent relation
descendent(X, Y) :- father(Y, X).
descendent(X, Y) :- father(Z, X), descendent(Z, Y).

% Queries:
% ?- brother(X, Y).    -> X = b, Y = c; X = c, Y = b.
% ?- cousin(X, Y).     -> X = d, Y = f; X = e, Y = f; X = f, Y = d; X = f, Y = e.
% ?- grandson(X, Y).   -> X = d, Y = a; X = e, Y = a; X = f, Y = a.
% ?- descendent(X, Y). -> X = b, Y = a; X = c, Y = a; X = d, Y = b; X = e, Y = b; X = f, Y = c; ...



4.
% Addition
add(X, Y, Result) :- Result is X + Y.

% Subtraction
subtract(X, Y, Result) :- Result is X - Y.

% Multiplication
multiply(X, Y, Result) :- Result is X * Y.

% Division
divide(X, Y, Result) :- Y \= 0, Result is X / Y.

% Queries:
% ?- add(5, 3, Result). -> Result = 8.
% ?- subtract(10, 4, Result). -> Result = 6.
% ?- multiply(7, 3, Result). -> Result = 21.
% ?- divide(9, 3, Result). -> Result = 3.



5.
% Base case
print_numbers(11) :- !.

% Recursive case
print_numbers(N) :- 
    write(N), nl,
    Next is N + 1,
    print_numbers(Next).

% Query:
% ?- print_numbers(1).



6.
% Base case: An empty list has 0 elements.
count_elements([], 0).

% Recursive case: For a non-empty list, count elements recursively.
count_elements([_|T], Count) :- 
    count_elements(T, TempCount),
    Count is TempCount + 1.

% Queries:
% ?- count_elements([a, b, c, d], Count). -> Count = 4.
% ?- count_elements([1, 2, 3, 4, 5], Count). -> Count = 5.
% ?- count_elements([], Count). -> Count = 0.




7.
% Insert element at the beginning of the list
insert_at_beginning(Elem, List, [Elem|List]).

% Insert element at a specific position
insert_at_pos(Elem, 1, List, [Elem|List]).
insert_at_pos(Elem, Pos, [Head|Tail], [Head|NewTail]) :-
    Pos > 1,
    NewPos is Pos - 1,
    insert_at_pos(Elem, NewPos, Tail, NewTail).

% Queries:
% ?- insert_at_beginning(5, [1, 2, 3], NewList). -> NewList = [5, 1, 2, 3].
% ?- insert_at_pos(10, 2, [1, 2, 3], NewList). -> NewList = [1, 10, 2, 3].

//**//

% Replace the first occurrence of OldElem with NewElem
replace(_, _, [], []).
replace(OldElem, NewElem, [OldElem|Tail], [NewElem|Tail]).
replace(OldElem, NewElem, [Head|Tail], [Head|NewTail]) :-
    replace(OldElem, NewElem, Tail, NewTail).

% Queries:
% ?- replace(2, 10, [1, 2, 3], NewList). -> NewList = [1, 10, 3].

//**//

% Delete the first occurrence of Elem from the list
delete_elem(_, [], []).
delete_elem(Elem, [Elem|Tail], Tail).
delete_elem(Elem, [Head|Tail], [Head|NewTail]) :-
    delete_elem(Elem, Tail, NewTail).

% Queries:
% ?- delete_elem(2, [1, 2, 3, 2], NewList). -> NewList = [1, 3, 2].




8.
% Base case: Reversing an empty list results in an empty list.
reverse_list([], []).

% Recursive case: Reverse the tail, append the head to the reversed tail.
reverse_list([Head|Tail], Reversed) :-
    reverse_list(Tail, RevTail),
    append(RevTail, [Head], Reversed).

% Queries:
% ?- reverse_list([1, 2, 3, 4], ReversedList). 




9.
% CUT (!): Ensures no backtracking beyond the point of cut.
age(john, 25).
age(mary, 30).
age(jane, 22).

% Use cut to prevent backtracking
find_age(Person, Age) :- age(Person, Age), !.

% FAIL: Forces failure when combined with CUT
male(john).
male(peter).
male(mike).

find_male :- male(Name), write(Name), nl, fail.

% Queries:
% ?- find_age(john, Age). 
% ?- find_male.




10.
% Tower of Hanoi solution
move(1, Source, Destination, _) :-
    write('Move top disk from '), write(Source), write(' to '), write(Destination), nl.

move(N, Source, Destination, Auxiliary) :-
    N > 1,
    M is N - 1,
    move(M, Source, Auxiliary, Destination),
    move(1, Source, Destination, _),
    move(M, Auxiliary, Destination, Source).

% Query:
% ?- move(3, left, right, center).




11.
% Base case: No queens left to place
solve_n_queens(N, Solution) :- 
    length(Solution, N),
    place_queens(Solution, N).

% Place queens without conflicts
place_queens([], _).
place_queens([Queen|Others], N) :-
    place_queens(Others, N),
    between(1, N, Queen),
    safe(Queen, Others, 1).

% Check if the queen is safe
safe(_, [], _).
safe(Queen, [OtherQueen|Others], Dist) :-
    Queen =\= OtherQueen,
    abs(Queen - OtherQueen) =\= Dist,
    NextDist is Dist + 1,
    safe(Queen, Others, NextDist).

% Queries:
% ?- solve_n_queens(4, Solution).




12.
% Facts about distances between cities
distance(a, b, 10).
distance(a, c, 15).
distance(a, d, 20).
distance(b, c, 35).
distance(b, d, 25).
distance(c, d, 30).

% The distance between two cities is symmetrical
dist(X, Y, D) :- distance(X, Y, D).
dist(X, Y, D) :- distance(Y, X, D).

% Find all permutations of a list
permute([], []).
permute(List, [Head|Perm]) :-
    select(Head, List, Rest),
    permute(Rest, Perm).

% Calculate the total cost of a tour
tour_cost([_], 0).
tour_cost([City1, City2|Rest], Cost) :-
    dist(City1, City2, D),
    tour_cost([City2|Rest], RestCost),
    Cost is D + RestCost.

% Solve the Travelling Salesman Problem
tsp(Start, Cities, MinTour, MinCost) :-
    permute(Cities, Tour),
    tour_cost([Start|Tour], Cost),
    MinCost is Cost,
    MinTour = [Start|Tour].

% Queries:
% ?- tsp(a, [b, c, d], Tour, Cost).





